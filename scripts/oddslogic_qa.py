#!/usr/bin/env python3
"""Generate coverage diagnostics for an OddsLogic archive."""
from __future__ import annotations

import argparse
from pathlib import Path
from typing import Optional

import sys

REPO_ROOT = Path(__file__).resolve().parents[1]
if str(REPO_ROOT) not in sys.path:
    sys.path.insert(0, str(REPO_ROOT))

import pandas as pd

import oddslogic_loader


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description="Summarize OddsLogic archive coverage.")
    parser.add_argument(
        "archive",
        type=Path,
        help="Path to the oddslogic archive directory (generated by oddslogic_scraper).",
    )
    parser.add_argument(
        "--classification",
        type=str,
        help="Optional classification filter (e.g., 'fbs', 'fcs').",
    )
    parser.add_argument(
        "--coverage-out",
        type=Path,
        help="Optional CSV output path for classification-level coverage stats.",
    )
    parser.add_argument(
        "--providers-out",
        type=Path,
        help="Optional CSV output path for provider coverage stats.",
    )
    return parser.parse_args()


def save_or_print(df: pd.DataFrame, path: Optional[Path], *, title: str) -> None:
    if path:
        path.parent.mkdir(parents=True, exist_ok=True)
        df.to_csv(path, index=False)
        print(f"Saved {title} to {path}")
    else:
        print(f"\n{title}\n{'-' * len(title)}")
        if df.empty:
            print("No records.")
        else:
            with pd.option_context("display.max_rows", None, "display.max_columns", None):
                print(df)


def main() -> None:
    args = parse_args()
    df = oddslogic_loader.load_archive_dataframe(args.archive)
    classification = args.classification
    coverage, provider = oddslogic_loader.summarize_coverage(df, classification=classification)

    save_or_print(coverage, args.coverage_out, title="Coverage by classification")
    save_or_print(provider, args.providers_out, title="Provider coverage")


if __name__ == "__main__":
    main()
